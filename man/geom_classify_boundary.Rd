% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classify_boundary.R
\name{geom_classify_boundary}
\alias{geom_classify_boundary}
\alias{cpt_class_bd}
\alias{stat_classify_boundary}
\title{Estimated class of plotted region and draw the decision boundaries between
different classes.}
\usage{
stat_classify_boundary(
  mapping = NULL,
  data = NULL,
  geom = GeomPath,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  res = NULL,
  method = NULL,
  grid = NULL,
  ...
)

geom_classify_boundary(
  mapping = NULL,
  data = NULL,
  stat = StatClassifyBoundary,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{res}{resolution of the raster which will be formed of a res x res grid.}

\item{method}{Density estimator to use, accepts character vector:
\code{"lda"},\code{"qda"}, \code{"randomForest"}, or \code{"knn"}.
Alternatively accepts functions  along with a list containing arguments.}

\item{smooth}{sets the bandwidth for the kernel density smoother. Defaults to 1/2.}

\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{xlim, ylim}{Range to compute and draw regions. If \code{NULL}, defaults to
range of data.}
}
\description{
Perform model estimation and compute the estimated class of every point
on a grid. \code{geom_classify_boundary} draws the decision boundaries.
}
\section{Aesthetics}{
 \code{geom_classify_boundary()} understands the following aesthetics (required
aesthetics are in bold). Fill can be used in place of group.:
\itemize{
\item \strong{x}
\item \strong{y}
\item \strong{group}
\item alpha
\item color
\item linetype
\item linewidth
}
}

\examples{
# Basic simulated data with bivariate normal data and various methods

# Simulate Data
set.seed(17)
si <- 3/4
n <- 25

df <- data.frame(x = rnorm(n,sd=si),y=rnorm(n,sd=si)+2,class = factor("A")) |>
  rbind(data.frame(x = rnorm(n,sd=2*si)+2,y=rnorm(n,sd=2*si)-1,class = factor("B"))) |>
  rbind(data.frame(x = rnorm(n,sd=1/2*si)+2,y=rnorm(n,sd=1/2*si)+1,class = factor("C")))

# Plot LDA and QDA methods


p_lda <- ggplot(data=df, aes(x, y, group = class))+
  geom_point_fill(aes(fill = class))+
  geom_classify_boundary(method = "lda")+
  ggtitle("Linear Discriminant Analysis")

p_qda <- ggplot(data=df, aes(x, y, group = class))+
  geom_point_fill(aes(fill = class))+
  geom_classify_boundary(method = "qda")+
  ggtitle("Quadratic Discriminant Analysis")
  
p_knn <- ggplot(data=df, aes(x, y, group = class))+
  geom_point_fill(aes(fill = class))+
  geom_classify_boundary(method = "knn")+
  ggtitle("K Nearest Neighbors")
 
p_rf <- ggplot(data=df, aes(x, y, group = class))+
  geom_point_fill(aes(fill = class))+
  geom_classify_boundary(method = "randomForest")+
  ggtitle("Random Forest")
  
library(patchwork)

(p_lda + p_qda) / (p_knn + p_rf) + plot_layout(guides = "collect")
  
# Plot with lower resolution

ggplot(data=df, aes(x, y, group = class))+
  geom_point_fill(aes(fill = class))+
  geom_classify_boundary(res = 1e1,method = "qda")
  
rdata <- function(n, n_groups = 3, radius = 3) {
  list_of_dfs <- lapply(0:(n_groups-1), function(k) {
    mu <- c(cos(2*k*pi/n_groups), sin(2*k*pi/n_groups))
    m <- MASS::mvrnorm(n, radius*mu, diag(2))
    structure(data.frame(m, as.character(k)), names = c("x", "y", "c"))
  })
  do.call("rbind", list_of_dfs)
}

# Plot with basic tidymodels methods

rdata(100, 5, 3) |> ggplot(aes(x, y, group = c))+
 geom_point_fill(aes(fill=c))+
 geom_classify_boundary()+
 coord_equal()
  
qda_mod <- discrim_quad() \%>\%
  set_mode("classification") \%>\%
  set_engine("MASS")

rf_mod <- rand_forest(mode="classification") |> 
  set_engine("ranger",importance = "impurity")

ggplot(data=df1, aes(x, y, group = class))+
  geom_point_fill(aes(fill = class))+
  geom_classify_boundary(method = rf_mod)
  
ggplot(data=df1, aes(x, y, group = class))+
  geom_point_fill(aes(fill = class))+
  geom_classify_boundary(method = qda_mod)
  
# Plot with custom function

custom_method <- function(data,mesh)  {
  mesh$fill <- factor((mesh$x^2+mesh$y^2 < 2))
  return(mesh)
}

ggplot(data=df, aes(x, y, group = class))+
  geom_point_fill(aes(fill = class))+
  geom_classify_boundary(method = custom_method)+
  coord_equal()

  
  
  
  
}
