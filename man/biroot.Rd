% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/biroot.R, R/biroot_lines.R
\name{biroot}
\alias{biroot}
\alias{biroot_lines}
\title{Find points on boundary of discrete classification}
\usage{
biroot(f, xlim = c(-1, 1), ylim = c(-1, 1), max_depth = 10, min_depth = 2, ...)

biroot_lines(
  f,
  xlim = c(-1, 1),
  ylim = c(-1, 1),
  max_depth = 10,
  min_depth = 2,
  ...
)
}
\value{
A dataframe with a row for each point with columns giving, location,
how deep in the grid search they were, a unique id for each square,
and finally the result of the discrete function at that point.

A dataframe with a row for each point with columns giving, location,
how deep in the grid search they were, a unique id for pair of points.
}
\description{
Find points on boundary of discrete classification

Find points on boundary of zero set of function
}
\section{Arguments}{
 \code{biroot()} understands the following arguments:
\itemize{
\item f - function for discrete classification over region
\item xlim - boundaries of x to be searched
\item ylim - boundaries of y to be searched
\item max_depth - how many times should the grid be split in four
\item min_depth - how many times should the grid split before becoming adaptive
\item ... - additional arguments for f
}

 \code{biroot_lines()} understands the following arguments:
\itemize{
\item f - function with zero set within region
\item xlim - boundaries of x to be searched
\item ylim - boundaries of y to be searched
\item max_depth - how many times should the grid be split in four
\item min_depth - how many times should the grid split before becoming adaptive
\item ... - additional arguments for f
}
}

\examples{

ftest <- function(x) x$x^2-x$y-2
biroot(sq, ftest)
biroot(sq, ftest) |> str()

biroot(ftest, xlim = c(-5,5), ylim = c(-5,5)) |> 
  ggplot(aes(x, y)) +
    geom_point(aes(fill = value), shape = 21) +
    coord_equal()
  
ftest <- function(v) with(v, x^2 + y^2 - 1)

(df <- biroot(ftest, xlim = c(-2,2), ylim = c(-2,2), max_depth = 9) )

df |> 
  ggplot(aes(x, y)) +
    geom_point(aes(fill = value), shape = 21) +
    geom_contour(
      aes(z = z),
      color = "red",
      breaks = 0, 
      data = expand.grid(
        "x" = seq(-5, 5, length.out = 101), 
        "y" = seq(-5, 5, length.out = 101)
      ) |> 
        transform("z" = x^2 + y^2 - 1)
    ) +  
    coord_equal()


ftest <- function(x) x$x^2-x$y-2
biroot(sq, ftest)
biroot(sq, ftest) |> str()

biroot(ftest, xlim = c(-5,5), ylim = c(-5,5)) |> 
  ggplot(aes(x, y)) +
    geom_point(aes(fill = value), shape = 21) +
    coord_equal()
  
ftest <- function(v) with(v, x^2 + y^2 - 1)

(df <- biroot(ftest, xlim = c(-2,2), ylim = c(-2,2), max_depth = 9) )

df |> 
  ggplot(aes(x, y)) +
    geom_point(aes(fill = value), shape = 21) +
    geom_contour(
      aes(z = z),
      color = "red",
      breaks = 0, 
      data = expand.grid(
        "x" = seq(-5, 5, length.out = 101), 
        "y" = seq(-5, 5, length.out = 101)
      ) |> 
        transform("z" = x^2 + y^2 - 1)
    ) +  
    coord_equal()

df |> 
  ggplot(aes(x, y)) +
    # geom_point( data = df |> filter(abs(value) >  .001), color = "black" ) +
    geom_point( data = df |> filter(abs(value) <= .001), color = "firebrick1" ) +
    coord_equal()
    
 biroot(f = heartf, xlim = c(-1.5,1.5),
        ylim = c(-1,1.5), max_depth = 8, boundary = TRUE) |> 
 ggplot(aes(x, y, group = id))+
    geom_line()
}
